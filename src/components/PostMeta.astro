---
import { Icon } from "astro-icon/components";
import I18nKey from "../i18n/i18nKey";
import { i18n } from "../i18n/translation";
import { formatDateToYYYYMMDD } from "../utils/date-utils";
import { getCategoryUrl, getTagUrl } from "../utils/url-utils";
import { umamiConfig, statsConfig } from "../config";

interface Props {
	class: string;
	published: Date;
	updated?: Date;
	tags: string[];
	category: string | null;
	hideTagsForMobile?: boolean;
	hideUpdateDate?: boolean;
	slug?: string;
}
const {
	published,
	updated,
	tags,
	category,
	hideTagsForMobile = false,
	hideUpdateDate = false,
	slug,
} = Astro.props;
const className = Astro.props.class;
---

<div class:list={["flex flex-wrap text-neutral-500 dark:text-neutral-400 items-center gap-4 gap-x-4 gap-y-2", className]}>
    <!-- publish date -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:calendar-today-outline-rounded" class="text-xl"></Icon>
        </div>
        <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(published)}</span>
    </div>

    <!-- update date -->
    {!hideUpdateDate && updated && updated.getTime() !== published.getTime() && (
        <div class="flex items-center">
            <div class="meta-icon"
            >
                <Icon name="material-symbols:edit-calendar-outline-rounded" class="text-xl"></Icon>
            </div>
            <span class="text-50 text-sm font-medium">{formatDateToYYYYMMDD(updated)}</span>
        </div>
    )}

    <!-- categories -->
    <div class="flex items-center">
        <div class="meta-icon"
        >
            <Icon name="material-symbols:book-2-outline-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            <a href={getCategoryUrl(category)} aria-label={`View all posts in the ${category} category`}
               class="link-lg transition text-50 text-sm font-medium
                            hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                {category || i18n(I18nKey.uncategorized)}
            </a>
        </div>
    </div>

    <!-- tags -->
    <div class:list={["items-center", {"flex": !hideTagsForMobile, "hidden md:flex": hideTagsForMobile}]}>
        <div class="meta-icon"
        >
            <Icon name="material-symbols:tag-rounded" class="text-xl"></Icon>
        </div>
        <div class="flex flex-row flex-nowrap items-center">
            {(tags && tags.length > 0) && tags.map((tag, i) => (
                <div class:list={[{"hidden": i == 0}, "mx-1.5 text-[var(--meta-divider)] text-sm"]}>/</div>
                <a href={getTagUrl(tag)} aria-label={`View all posts with the ${tag.trim()} tag`}
                   class="link-lg transition text-50 text-sm font-medium
                                hover:text-[var(--primary)] dark:hover:text-[var(--primary)] whitespace-nowrap">
                    {tag.trim()}
                </a>
            ))}
            {!(tags && tags.length > 0) && <div class="transition text-50 text-sm font-medium">{i18n(I18nKey.noTags)}</div>}
        </div>
    </div>

    <!-- page views -->
    {slug && (
        <div class="flex items-center">
            <div class="meta-icon">
                <Icon name="material-symbols:visibility-outline-rounded" class="text-xl"></Icon>
            </div>
            <span id="page-views-display" class="text-50 text-sm font-medium">{statsConfig.loadingText}</span>
        </div>
    )}
</div>

{slug && (
    <script define:vars={{ slug, umamiConfig, unavailableText: statsConfig.unavailableText, viewsText: statsConfig.viewsText, visitsText: statsConfig.visitsText }}>
        // 客户端统计文案生成函数
        function generateStatsText(pageViews, visits) {
            return `${viewsText} ${pageViews} · ${visitsText} ${visits}`;
        }

        // 获取访问量统计
        async function fetchPageViews(isRetry = false) {
            if (!umamiConfig.enable) {
                return;
            }

            try {
                // 调用全局工具获取 Umami 分享数据
                const { websiteId, token } = await getUmamiShareData(umamiConfig.baseUrl, umamiConfig.shareId, umamiConfig.region);

                // 第二步：获取统计数据
                const currentTimestamp = Date.now();
                const params = new URLSearchParams({
                  startAt: '0',
                  endAt: currentTimestamp.toString(),
                  unit: 'hour',
                  timezone: umamiConfig.timezone,
                  path: `eq./posts/${slug}/`,
                  compare: 'false'
                });
                const statsUrl = `${umamiConfig.baseUrl}/analytics/${umamiConfig.region}/api/websites/${websiteId}/stats?${params.toString()}`;

                const statsResponse = await fetch(statsUrl, {
                    headers: {
                        'x-umami-share-token': token
                    }
                });

                if (!statsResponse.ok) {
                    if (statsResponse.status === 401 && !isRetry) {
                        clearUmamiShareCache();
                        return fetchPageViews(true);
                    }
                    throw new Error('获取统计数据失败');
                }

                const statsData = await statsResponse.json();
                const pageViews = statsData.pageviews || 0;
                const visits = statsData.visitors || 0;

                const displayElement = document.getElementById('page-views-display');
                if (displayElement) {
                    displayElement.textContent = generateStatsText(pageViews, visits);
                }
            } catch (error) {
                console.error('Error fetching page views:', error);
                const displayElement = document.getElementById('page-views-display');
                if (displayElement) {
                    displayElement.textContent = unavailableText;
                }
            }
        }

        // 页面加载完成后获取统计数据
        if (document.readyState === 'loading') {
            document.addEventListener('DOMContentLoaded', fetchPageViews);
        } else {
            fetchPageViews();
        }
    </script>
)}