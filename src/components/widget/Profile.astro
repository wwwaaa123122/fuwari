---
import { Icon } from "astro-icon/components";
import { profileConfig, umamiConfig, statsConfig } from "../../config";
import { url } from "../../utils/url-utils";
import ImageWrapper from "../misc/ImageWrapper.astro";

const config = profileConfig;
---
<div class="card-base p-3">
    <a aria-label="Go to About Page" href={url('/about/')}
       class="group block relative mx-auto mt-1 lg:mx-0 lg:mt-0 mb-3
       max-w-[12rem] lg:max-w-none overflow-hidden rounded-xl active:scale-95">
        <div class="absolute transition pointer-events-none group-hover:bg-black/30 group-active:bg-black/50
        w-full h-full z-50 flex items-center justify-center">
            <Icon name="fa6-regular:address-card"
                  class="transition opacity-0 scale-90 group-hover:scale-100 group-hover:opacity-100 text-white text-5xl">
            </Icon>
        </div>
        <ImageWrapper src={config.avatar || ""} alt="Profile Image of the Author" class="mx-auto lg:w-full h-full lg:mt-0 "></ImageWrapper>
    </a>
    <div class="px-2">
        <div class="font-bold text-xl text-center mb-1 dark:text-neutral-50 transition">{config.name}</div>
        <div class="h-1 w-5 bg-[var(--primary)] mx-auto rounded-full mb-2 transition"></div>
        <div class="text-center text-neutral-400 mb-2.5 transition">{config.bio}</div>
        <div class="flex gap-2 justify-center mb-1">
            {config.links.length > 1 && config.links.map(item =>
                    <a rel="me" aria-label={item.name} href={item.url} target="_blank" class="btn-regular rounded-lg h-10 w-10 active:scale-90">
                        <Icon name={item.icon} class="text-[1.5rem]"></Icon>
                    </a>
            )}
            {config.links.length == 1 && <a rel="me" aria-label={config.links[0].name} href={config.links[0].url} target="_blank"
                                            class="btn-regular rounded-lg h-10 gap-2 px-3 font-bold active:scale-95">
                <Icon name={config.links[0].icon} class="text-[1.5rem]"></Icon>
                {config.links[0].name}
            </a>}
        </div>
    </div>

    <!-- total stats section -->
    <div class="border-t border-dashed border-black/10 dark:border-white/[0.15] mt-3 pt-3">
        <div class="text-center text-sm text-neutral-400 mb-2">站点统计</div>
        <div class="flex justify-center items-center gap-4 text-xs text-neutral-500">
            <div id="total-views-display" class="flex items-center gap-1">
                <Icon name="material-symbols:visibility-outline-rounded" class="text-base"></Icon>
                <span>{statsConfig.loadingText}</span>
            </div>
            <div class="h-3 w-px bg-neutral-300 dark:bg-neutral-600"></div>
            <div id="total-visits-display" class="flex items-center gap-1">
                <Icon name="material-symbols:person-outline-rounded" class="text-base"></Icon>
                <span>{statsConfig.loadingText}</span>
            </div>
        </div>
    </div>
</div>

<script define:vars={{ umamiConfig, statsConfig }}>
    // 获取总访问量统计
    async function fetchTotalStats(isRetry = false) {
        if (!umamiConfig.enable) {
            return;
        }

        try {
            // 调用全局工具获取 Umami 分享数据
            const { websiteId, token } = await getUmamiShareData(umamiConfig.baseUrl, umamiConfig.shareId);

            // 获取总统计数据
            const currentTimestamp = Date.now();
            const params = new URLSearchParams({
              startAt: '0',
              endAt: currentTimestamp.toString(),
              unit: 'hour',
              timezone: encodeURIComponent(umamiConfig.timezone),
              compare: 'false'
            });
            const statsUrl = `${umamiConfig.baseUrl}/api/websites/${websiteId}/stats?${params.toString()}`;

            const statsResponse = await fetch(statsUrl, {
                headers: {
                    'x-umami-share-token': token
                }
            });

            if (!statsResponse.ok) {
                if (statsResponse.status === 401 && !isRetry) {
                    clearUmamiShareCache();
                    return fetchTotalStats(true);
                }
                throw new Error('获取统计数据失败');
            }

            const statsData = await statsResponse.json();
            const totalViews = statsData.pageviews || 0;
            const totalVisits = statsData.visitors || 0;

            const viewsElement = document.getElementById('total-views-display');
            const visitsElement = document.getElementById('total-visits-display');
            
            if (viewsElement) {
                viewsElement.querySelector('span').textContent = `${statsConfig.viewsText} ${totalViews}`;
            }
            if (visitsElement) {
                visitsElement.querySelector('span').textContent = `${statsConfig.visitsText} ${totalVisits}`;
            }
        } catch (error) {
            console.error('Error fetching total stats:', error);
            const viewsElement = document.getElementById('total-views-display');
            const visitsElement = document.getElementById('total-visits-display');
            
            if (viewsElement) {
                viewsElement.querySelector('span').textContent = statsConfig.unavailableText;
            }
            if (visitsElement) {
                visitsElement.querySelector('span').textContent = statsConfig.unavailableText;
            }
        }
    }

    // 页面加载完成后获取统计数据
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', fetchTotalStats);
    } else {
        fetchTotalStats();
    }
</script>

